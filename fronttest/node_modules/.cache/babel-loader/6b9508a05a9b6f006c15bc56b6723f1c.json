{"ast":null,"code":"import { MsgActionType } from \"../Action-Types\";\nexport const initialState = {\n  active: \"\",\n  count: 0,\n  list: []\n};\nexport const msgReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case MsgActionType.ADDMSG:\n      {\n        const newState = state;\n        const index = state.list.findIndex(item => item.name === action.payload.sender);\n\n        if (index) {\n          newState.list[index].count++;\n          newState.list[index].msg = [...newState.list[index].msg, action.payload];\n          return {\n            newState\n          }; // return {\n          //   ...state,\n          //   list: state.list[index].count + 1,\n          //   list: [...state.msg, action.payload]\n          // };\n        } else {\n          const newMsgList = {\n            name: action.payload.sender,\n            count: 1,\n            msg: []\n          };\n          newMsgList.msg = [...newMsgList.msg, action.payload];\n          newState.list = [...newState.list, newMsgList];\n          return newState;\n        }\n      }\n\n    case MsgActionType.ADDCONVERS:\n      {\n        if (state.list.find(item => item.name === action.payload)) return state;\n        const newState = state;\n        const newMsgList = {\n          name: action.payload,\n          count: 0,\n          msg: []\n        };\n        newState.list = [...newState.list, newMsgList];\n        return newState;\n      }\n\n    default:\n      return state;\n  }\n}; // case actionTypes.ADD: {\n//   return {\n//     ...state,\n//     count: state.count + 1,\n//     list: [...state.list, action.payload]\n//   };\n// }\n// case actionTypes.DELETE: {\n//   const oldList = [...state.list];\n//   const newList = oldList;\n//   return {\n//     ...state,\n//     count: state.count - 1,\n//     list: newList\n//   };\n// }","map":{"version":3,"names":["MsgActionType","initialState","active","count","list","msgReducer","state","action","type","ADDMSG","newState","index","findIndex","item","name","payload","sender","msg","newMsgList","ADDCONVERS","find"],"sources":["/Users/cgangaro/chat-app_Nestjs-React_Redux-Socket.io/fronttest/src/State/Reducers/msgReducer.tsx"],"sourcesContent":["import { MsgActionType } from \"../Action-Types\";\nimport { msgAction } from \"../Actions\";\nimport { msg } from \"../type\";\n\ninterface msgList {\n  name: string;\n  count: number;\n  msg: msg[];\n}\n\ninterface Conversations {\n  active: string;\n  count: number;\n  list: msgList[];\n}\n\nexport const initialState: Conversations = {\n  active: \"\",\n  count: 0,\n  list: []\n};\n\nexport const msgReducer = (state: Conversations = initialState, action: msgAction) => {\n  switch (action.type) {\n    case MsgActionType.ADDMSG: {\n      const newState = state;\n      const index = state.list.findIndex(item => item.name === action.payload.sender);\n      if (index)\n      {\n        newState.list[index].count++;\n        newState.list[index].msg = [...newState.list[index].msg, action.payload];\n        return {newState};\n        // return {\n        //   ...state,\n        //   list: state.list[index].count + 1,\n        //   list: [...state.msg, action.payload]\n        // };\n      }\n      else\n      {\n        const newMsgList: msgList = {\n          name: action.payload.sender,\n          count: 1,\n          msg: []\n        }\n        newMsgList.msg = [...newMsgList.msg, action.payload];\n        newState.list = [...newState.list, newMsgList];\n        return newState;\n      }\n    }\n    case MsgActionType.ADDCONVERS: {\n      if (state.list.find(item => item.name === action.payload))\n        return state;\n      const newState = state;\n      const newMsgList: msgList = {\n        name: action.payload,\n        count: 0,\n        msg: []\n      }\n      newState.list = [...newState.list, newMsgList];\n      return newState;\n    }\n    default:\n      return state;\n  }\n};\n\n// case actionTypes.ADD: {\n//   return {\n//     ...state,\n//     count: state.count + 1,\n//     list: [...state.list, action.payload]\n//   };\n// }\n// case actionTypes.DELETE: {\n//   const oldList = [...state.list];\n//   const newList = oldList;\n\n//   return {\n//     ...state,\n//     count: state.count - 1,\n//     list: newList\n//   };\n// }"],"mappings":"AAAA,SAASA,aAAT,QAA8B,iBAA9B;AAgBA,OAAO,MAAMC,YAA2B,GAAG;EACzCC,MAAM,EAAE,EADiC;EAEzCC,KAAK,EAAE,CAFkC;EAGzCC,IAAI,EAAE;AAHmC,CAApC;AAMP,OAAO,MAAMC,UAAU,GAAG,YAA4D;EAAA,IAA3DC,KAA2D,uEAApCL,YAAoC;EAAA,IAAtBM,MAAsB;;EACpF,QAAQA,MAAM,CAACC,IAAf;IACE,KAAKR,aAAa,CAACS,MAAnB;MAA2B;QACzB,MAAMC,QAAQ,GAAGJ,KAAjB;QACA,MAAMK,KAAK,GAAGL,KAAK,CAACF,IAAN,CAAWQ,SAAX,CAAqBC,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcP,MAAM,CAACQ,OAAP,CAAeC,MAA1D,CAAd;;QACA,IAAIL,KAAJ,EACA;UACED,QAAQ,CAACN,IAAT,CAAcO,KAAd,EAAqBR,KAArB;UACAO,QAAQ,CAACN,IAAT,CAAcO,KAAd,EAAqBM,GAArB,GAA2B,CAAC,GAAGP,QAAQ,CAACN,IAAT,CAAcO,KAAd,EAAqBM,GAAzB,EAA8BV,MAAM,CAACQ,OAArC,CAA3B;UACA,OAAO;YAACL;UAAD,CAAP,CAHF,CAIE;UACA;UACA;UACA;UACA;QACD,CAVD,MAYA;UACE,MAAMQ,UAAmB,GAAG;YAC1BJ,IAAI,EAAEP,MAAM,CAACQ,OAAP,CAAeC,MADK;YAE1Bb,KAAK,EAAE,CAFmB;YAG1Bc,GAAG,EAAE;UAHqB,CAA5B;UAKAC,UAAU,CAACD,GAAX,GAAiB,CAAC,GAAGC,UAAU,CAACD,GAAf,EAAoBV,MAAM,CAACQ,OAA3B,CAAjB;UACAL,QAAQ,CAACN,IAAT,GAAgB,CAAC,GAAGM,QAAQ,CAACN,IAAb,EAAmBc,UAAnB,CAAhB;UACA,OAAOR,QAAP;QACD;MACF;;IACD,KAAKV,aAAa,CAACmB,UAAnB;MAA+B;QAC7B,IAAIb,KAAK,CAACF,IAAN,CAAWgB,IAAX,CAAgBP,IAAI,IAAIA,IAAI,CAACC,IAAL,KAAcP,MAAM,CAACQ,OAA7C,CAAJ,EACE,OAAOT,KAAP;QACF,MAAMI,QAAQ,GAAGJ,KAAjB;QACA,MAAMY,UAAmB,GAAG;UAC1BJ,IAAI,EAAEP,MAAM,CAACQ,OADa;UAE1BZ,KAAK,EAAE,CAFmB;UAG1Bc,GAAG,EAAE;QAHqB,CAA5B;QAKAP,QAAQ,CAACN,IAAT,GAAgB,CAAC,GAAGM,QAAQ,CAACN,IAAb,EAAmBc,UAAnB,CAAhB;QACA,OAAOR,QAAP;MACD;;IACD;MACE,OAAOJ,KAAP;EAxCJ;AA0CD,CA3CM,C,CA6CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}