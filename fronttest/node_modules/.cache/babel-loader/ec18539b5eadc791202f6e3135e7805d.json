{"ast":null,"code":"import { clientListActionType, MsgActionType } from \"../Action-Types\";\nexport const initialState = {\n  count: 0,\n  list: []\n};\nexport const clientListReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case clientListActionType.ADDCLIENT:\n      {\n        console.log(\"add client\");\n        return { ...state,\n          count: state.count + 1,\n          list: [...state.list, action.payload]\n        };\n      }\n\n    case clientListActionType.REMOVECLIENT:\n      {\n        return { ...state,\n          count: state.count - 1,\n          list: state.list.filter(item => item.id !== action.payload.id)\n        };\n      }\n\n    case clientListActionType.ADDMSG:\n      {\n        const newState = state;\n        let index = -1;\n\n        if (action.payload.sender == \"Me\") {\n          index = state.list.findIndex(item => item.name === action.payload.recipient);\n        } else {\n          index = state.list.findIndex(item => item.name === action.payload.sender);\n        }\n\n        console.log(`reducer add msg, index = ${index}`);\n\n        if (index >= 0) {\n          console.log(`reducer index = ${index}`);\n          console.log(`count = ${state.list[index].count}`); // newState.list[index].count;\n\n          newState.list[index].msg = [...newState.list[index].msg, action.payload];\n          newState.list[index].count = newState.list[index].count + 1;\n          return { ...state,\n            list: newState.list\n          };\n        }\n      }\n\n    case MsgActionType.ADDCONVERS:\n      {\n        if (state.list.find(item => item.name === action.payload)) return state;\n        const newState = state;\n        const newMsgList = {\n          name: action.payload,\n          count: 0,\n          msg: []\n        };\n        newState.list = [...newState.list, newMsgList];\n        return { ...state,\n          list: newState.list\n        };\n      }\n\n    case MsgActionType.SETACTIVECONVERS:\n      {\n        console.log('reducer set active convers');\n        return { ...state,\n          active: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n}; //  // return {\n//               //   ...state,\n//               //   list: state.list[index].count + 1,\n//               //   list: [...state.msg, action.payload]\n//               // };\n//             }\n//             else\n//             {\n//               console.log(`reducer create msglist`)\n//               let sender = \"\";\n//               if (action.payload.sender == \"Me\")\n//               {\n//                 sender = action.payload.recipient;\n//               }\n//               else\n//               {\n//                 sender = action.payload.sender;\n//               }\n//               const newMsgList: msgList = {\n//                 name: sender,\n//                 count: 1,\n//                 msg: []\n//               }\n//               newMsgList.msg = [...newMsgList.msg, action.payload];\n//               newState.list = [...newState.list, newMsgList];\n//               return {\n//                 ...state,\n//                 list: newState.list,\n//                 count: state.count + 1\n//               };","map":{"version":3,"names":["clientListActionType","MsgActionType","initialState","count","list","clientListReducer","state","action","type","ADDCLIENT","console","log","payload","REMOVECLIENT","filter","item","id","ADDMSG","newState","index","sender","findIndex","name","recipient","msg","ADDCONVERS","find","newMsgList","SETACTIVECONVERS","active"],"sources":["/Users/cgangaro/chat-app_Nestjs-React_Redux-Socket.io/fronttest/src/State/Reducers/clientListReducer.tsx"],"sourcesContent":["import { validateInput } from \"../../Utils/logUtils\";\nimport { clientListActionType, LogActionType, MsgActionType } from \"../Action-Types\";\nimport { clientListAction, logAction } from \"../Actions\";\nimport { Client, ClientList } from \"../type\";\n\n\nexport const initialState: ClientList = {\n    count: 0,\n    list: []\n  };\n\nexport const clientListReducer = (state: ClientList = initialState, action: clientListAction) => {\n    switch (action.type) {\n        case clientListActionType.ADDCLIENT: {\n            console.log(\"add client\")\n            return {\n                ...state,\n                count: state.count + 1,\n                list: [...state.list, action.payload]\n              };\n        }\n        case clientListActionType.REMOVECLIENT: {\n            return {\n                ...state,\n                count: state.count - 1,\n                list: state.list.filter(item => item.id !== action.payload.id)\n              };\n        }\n        case clientListActionType.ADDMSG: {\n          const newState = state;\n          let index = -1;\n          if (action.payload.sender == \"Me\")\n          {\n            index = state.list.findIndex(item => item.name === action.payload.recipient);\n          }\n          else\n          {\n            index = state.list.findIndex(item => item.name === action.payload.sender);\n          }\n          console.log(`reducer add msg, index = ${index}`);\n          if (index >= 0)\n          {\n            console.log(`reducer index = ${index}`)\n            console.log(`count = ${state.list[index].count}`)\n            // newState.list[index].count;\n            newState.list[index].msg = [...newState.list[index].msg, action.payload];\n            newState.list[index].count = newState.list[index].count + 1;\n            return {\n              ...state,\n              list: newState.list\n            };\n             \n            }\n          }\n          case MsgActionType.ADDCONVERS: {\n            if (state.list.find(item => item.name === action.payload))\n              return state;\n            const newState = state;\n            const newMsgList: msgList = {\n              name: action.payload,\n              count: 0,\n              msg: []\n            }\n            newState.list = [...newState.list, newMsgList];\n            return {\n              ...state,\n              list: newState.list\n            };\n          }\n          case MsgActionType.SETACTIVECONVERS: {\n            console.log('reducer set active convers');\n            return {\n              ...state,\n              active: action.payload\n            }\n          }\n        default:\n        return state;\n    }\n};\n\n//  // return {\n//               //   ...state,\n//               //   list: state.list[index].count + 1,\n//               //   list: [...state.msg, action.payload]\n//               // };\n//             }\n//             else\n//             {\n//               console.log(`reducer create msglist`)\n//               let sender = \"\";\n//               if (action.payload.sender == \"Me\")\n//               {\n//                 sender = action.payload.recipient;\n//               }\n//               else\n//               {\n//                 sender = action.payload.sender;\n//               }\n//               const newMsgList: msgList = {\n//                 name: sender,\n//                 count: 1,\n//                 msg: []\n//               }\n//               newMsgList.msg = [...newMsgList.msg, action.payload];\n//               newState.list = [...newState.list, newMsgList];\n//               return {\n//                 ...state,\n//                 list: newState.list,\n//                 count: state.count + 1\n//               };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}