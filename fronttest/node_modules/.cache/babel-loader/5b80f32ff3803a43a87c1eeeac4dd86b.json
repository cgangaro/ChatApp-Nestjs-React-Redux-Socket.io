{"ast":null,"code":"import React from \"react\";\nimport \"./CSS/AffMsg.css\";\nimport \"./CSS/All.css\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AffMsg() {\n  // const msgScroll = useRef<null | HTMLDivElement>(null);\n  // const scrollToBottom = useScrollToBottom();\n  // const converList = useSelector((state: RootState) => state.msg)\n  // const logData = useSelector((state: RootState) => state.log)\n  // const utilsData = useSelector((state: RootState) => state.utils)\n  // const dispatch = useDispatch();\n  // const { msgAdd, setUsername, addClient, conversAdd } = bindActionCreators(actionCreators, dispatch);\n  // const [text, setText] = useState('Wsh la team');\n  // const [recipient, setRecipient] = useState('');\n  // const [index, setIndex] = useState(-1);\n  // utilsData.socket.removeAllListeners();\n  // React.useEffect(() => {\n  //     utilsData.socket.on('friendsList', function(arrClient: Client[]) {\n  //         console.log('Friends List received, useEffect()');\n  //         for (var i = 0; i < arrClient.length; i++)\n  //         {\n  //           if (arrClient[i].username.length > 0 && arrClient[i].id != logData.id)\n  //           {\n  //             console.log(`add client: ${arrClient[i].username}`)\n  //             addClient(arrClient[i]);\n  //             conversAdd(arrClient[i].username);\n  //           }\n  //         }\n  //       })\n  //     utilsData.socket.on('newFriend', function(client: Client) {\n  //         console.log(`new Friend: ${client.username}, useEffect()`);\n  //         if (client.id != logData.id)\n  //         {\n  //           addClient(client);\n  //           conversAdd(client.username);\n  //         }\n  //       })\n  // })\n  // // React.useEffect(() => {\n  // //     scrollToBottom()\n  // //   }, [converList.list[index]]);\n  // // utilsData.socket.on('disconnect', function() {\n  // //     console.log('Disconnected');\n  // // });\n  // utilsData.socket.on('msgInputToOtherClient', function(msgToSend: any) {\n  //     console.log(msgToSend.sender, 'said: ', msgToSend.text);\n  //     let newmsg: msg = {\n  //         sender: msgToSend.sender,\n  //         text: msgToSend.text,\n  //         recipient: \"Me\"\n  //     }\n  //     msgAdd(newmsg);\n  // })\n  // function DisplayBubble(props: {msg: msg}) {\n  //     if (props.msg.sender ===  \"Me\")\n  //         return (\n  //             <div className=\"msgFrame\" id=\"myMsgFrame\">\n  //                 <div className=\"bubble\" id=\"myBubbleMessage\">\n  //                     <p>{props.msg.text}</p>\n  //                 </div>\n  //             </div>\n  //         )\n  //     else\n  //         return (\n  //             <div className=\"msgFrame\" id=\"correspondentMsgFrame\">\n  //                 <div className=\"bubble\" id=\"correspondentBubbleMessage\">\n  //                     <p>{props.msg.text}</p>\n  //                 </div>\n  //             </div>\n  //         )\n  // }\n  // function sendMessage() {\n  //     console.log(\"sendMessage()\")\n  //     if (converList.active.length > 0)\n  //     {\n  //         if (validateInput(converList.active) && validateInput(text)) {\n  //             const message: msgToSend = {\n  //                 sender: logData.username,\n  //                 recipient: converList.active,\n  //                 text: text,\n  //             }\n  //             const msgToList: msg = { \n  //                 sender: \"Me\",\n  //                 recipient: converList.active,\n  //                 text: text\n  //             };\n  //             utilsData.socket.emit('msgToOtherClient', message);\n  //             msgAdd(msgToList);\n  //             setText('');\n  //         }\n  //         else\n  //             console.log(\"Msg non valide\")\n  //     }\n  //     else\n  //         console.log(\"Send: pas de convers active\")\n  // }\n  // function DisplayConvers(props: {}) {\n  //     console.log('display convers');\n  //     if (converList.active.length > 0)\n  //     {\n  //         console.log(`convers activ = ${converList.active}, count ${converList.count}`);\n  //         if (converList.count > 0)\n  //             console.log(`count > 0 et [0] = ${converList.list[0].name}`)\n  //         const index_test = converList.list.findIndex(item => item.name === converList.active);\n  //         setIndex(index_test);\n  //         console.log(`index = ${index}`);\n  //         if (index >= 0)\n  //         {\n  //             const msgList = converList.list[index];\n  //             return (\n  //                 <div id=\"affichage\" ref={msgScroll}>\n  //                     {msgList.msg.map((msg, index) => (\n  //                         <div id=\"affListMsg\" key={index}>\n  //                             <DisplayBubble msg={msg}/>\n  //                         </div>\n  //                     ))}\n  //                 </div>\n  //             );\n  //         }\n  //         else\n  //         {\n  //             return (\n  //                 <div id=\"affichage\">\n  //                 </div>\n  //             );\n  //         }\n  //     }\n  //     else\n  //     {\n  //         return (\n  //             <div id=\"affichage\">\n  //             </div>\n  //         );\n  //     }\n  // }\n  // function TestAddMsg() {\n  //     if (converList.active.length > 0)\n  //     {\n  //         console.log(`add msg, convers active = ${converList.active}`);\n  //         const newmsg: msg = {\n  //             text: \"ok1\",\n  //             sender: converList.active,\n  //             recipient: logData.username\n  //         }\n  //         msgAdd(newmsg);\n  //     }\n  //     else\n  //         console.log('Pas de convers active');\n  // }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n}\n\n_c = AffMsg;\nexport default AffMsg;\n\nvar _c;\n\n$RefreshReg$(_c, \"AffMsg\");","map":{"version":3,"names":["React","AffMsg"],"sources":["/Users/cgangaro/chat-app_Nestjs-React_Redux-Socket.io/fronttest/src/Components/AffMsg.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport ScrollIntoView from 'react-scroll-into-view'\nimport ScrollToBottom, { useScrollToBottom, useSticky } from 'react-scroll-to-bottom';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { RootState } from \"../State\";\nimport { Client, msg } from \"../State/type\";\nimport io from 'socket.io-client';\nimport { bindActionCreators } from 'redux';\nimport { actionCreators } from '../State';\nimport \"./CSS/AffMsg.css\"\nimport \"./CSS/All.css\"\nimport { validateInput } from '../Utils/logUtils';\nimport { addClient } from \"../State/Action-Creators\";\n\ninterface msgToSend {\n    sender: string;\n    recipient: string;\n    text: string;\n  }\n\nfunction AffMsg() {\n\n    // const msgScroll = useRef<null | HTMLDivElement>(null);\n\n    // const scrollToBottom = useScrollToBottom();\n\n    // const converList = useSelector((state: RootState) => state.msg)\n    // const logData = useSelector((state: RootState) => state.log)\n    // const utilsData = useSelector((state: RootState) => state.utils)\n    // const dispatch = useDispatch();\n\n    // const { msgAdd, setUsername, addClient, conversAdd } = bindActionCreators(actionCreators, dispatch);\n\n    // const [text, setText] = useState('Wsh la team');\n    // const [recipient, setRecipient] = useState('');\n    // const [index, setIndex] = useState(-1);\n\n    // utilsData.socket.removeAllListeners();\n\n    // React.useEffect(() => {\n    //     utilsData.socket.on('friendsList', function(arrClient: Client[]) {\n    //         console.log('Friends List received, useEffect()');\n    //         for (var i = 0; i < arrClient.length; i++)\n    //         {\n    //           if (arrClient[i].username.length > 0 && arrClient[i].id != logData.id)\n    //           {\n    //             console.log(`add client: ${arrClient[i].username}`)\n    //             addClient(arrClient[i]);\n    //             conversAdd(arrClient[i].username);\n    //           }\n    //         }\n    //       })\n          \n    //     utilsData.socket.on('newFriend', function(client: Client) {\n    //         console.log(`new Friend: ${client.username}, useEffect()`);\n    //         if (client.id != logData.id)\n    //         {\n    //           addClient(client);\n    //           conversAdd(client.username);\n    //         }\n    //       })\n    // })\n\n    // // React.useEffect(() => {\n    // //     scrollToBottom()\n    // //   }, [converList.list[index]]);\n\n    // // utilsData.socket.on('disconnect', function() {\n    // //     console.log('Disconnected');\n    // // });\n\n    // utilsData.socket.on('msgInputToOtherClient', function(msgToSend: any) {\n    //     console.log(msgToSend.sender, 'said: ', msgToSend.text);\n    //     let newmsg: msg = {\n    //         sender: msgToSend.sender,\n    //         text: msgToSend.text,\n    //         recipient: \"Me\"\n    //     }\n    //     msgAdd(newmsg);\n    // })\n\n    // function DisplayBubble(props: {msg: msg}) {\n    //     if (props.msg.sender ===  \"Me\")\n    //         return (\n    //             <div className=\"msgFrame\" id=\"myMsgFrame\">\n    //                 <div className=\"bubble\" id=\"myBubbleMessage\">\n    //                     <p>{props.msg.text}</p>\n    //                 </div>\n    //             </div>\n    //         )\n    //     else\n    //         return (\n    //             <div className=\"msgFrame\" id=\"correspondentMsgFrame\">\n    //                 <div className=\"bubble\" id=\"correspondentBubbleMessage\">\n    //                     <p>{props.msg.text}</p>\n    //                 </div>\n    //             </div>\n    //         )\n    // }\n\n    // function sendMessage() {\n    //     console.log(\"sendMessage()\")\n    //     if (converList.active.length > 0)\n    //     {\n    //         if (validateInput(converList.active) && validateInput(text)) {\n    //             const message: msgToSend = {\n    //                 sender: logData.username,\n    //                 recipient: converList.active,\n    //                 text: text,\n    //             }\n    //             const msgToList: msg = { \n    //                 sender: \"Me\",\n    //                 recipient: converList.active,\n    //                 text: text\n    //             };\n    //             utilsData.socket.emit('msgToOtherClient', message);\n    //             msgAdd(msgToList);\n    //             setText('');\n    //         }\n    //         else\n    //             console.log(\"Msg non valide\")\n    //     }\n    //     else\n    //         console.log(\"Send: pas de convers active\")\n    // }\n\n    // function DisplayConvers(props: {}) {\n    //     console.log('display convers');\n    //     if (converList.active.length > 0)\n    //     {\n    //         console.log(`convers activ = ${converList.active}, count ${converList.count}`);\n    //         if (converList.count > 0)\n    //             console.log(`count > 0 et [0] = ${converList.list[0].name}`)\n    //         const index_test = converList.list.findIndex(item => item.name === converList.active);\n    //         setIndex(index_test);\n    //         console.log(`index = ${index}`);\n    //         if (index >= 0)\n    //         {\n    //             const msgList = converList.list[index];\n    //             return (\n    //                 <div id=\"affichage\" ref={msgScroll}>\n    //                     {msgList.msg.map((msg, index) => (\n    //                         <div id=\"affListMsg\" key={index}>\n    //                             <DisplayBubble msg={msg}/>\n    //                         </div>\n    //                     ))}\n    //                 </div>\n    //             );\n    //         }\n    //         else\n    //         {\n    //             return (\n    //                 <div id=\"affichage\">\n    //                 </div>\n    //             );\n    //         }\n    //     }\n    //     else\n    //     {\n    //         return (\n    //             <div id=\"affichage\">\n    //             </div>\n    //         );\n    //     }\n    // }\n\n    // function TestAddMsg() {\n    //     if (converList.active.length > 0)\n    //     {\n    //         console.log(`add msg, convers active = ${converList.active}`);\n    //         const newmsg: msg = {\n    //             text: \"ok1\",\n    //             sender: converList.active,\n    //             recipient: logData.username\n    //         }\n    //         msgAdd(newmsg);\n    //     }\n    //     else\n    //         console.log('Pas de convers active');\n    // }\n\n    return (\n    <>\n        {/* <div className=\"main_container\" id=\"main_AffMsg\">\n            <DisplayConvers/>\n            <div id=\"sendZone\">\n                <input\n                    value={text}\n                    onChange={e => setText(e.target.value)}\n                    placeholder=\"Enter message...\"\n                />\n                <button type=\"button\" onClick={() => sendMessage()}>\n                    Send\n                </button>\n            </div>\n        </div> */}\n    </>\n  );\n}\n\nexport default AffMsg;"],"mappings":"AAAA,OAAOA,KAAP,MAAmD,OAAnD;AASA,OAAO,kBAAP;AACA,OAAO,eAAP;;;;AAUA,SAASC,MAAT,GAAkB;EAEdoBACA,qCADA;AAiBH;;KAlLQA,M;AAoLT,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}