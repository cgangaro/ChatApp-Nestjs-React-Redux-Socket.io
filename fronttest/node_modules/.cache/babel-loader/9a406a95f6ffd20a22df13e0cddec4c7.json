{"ast":null,"code":"import { MsgActionType } from \"../Action-Types\";\nexport const initialState = {\n  active: {\n    name: \"\",\n    count: 0,\n    msg: []\n  },\n  count: 0,\n  list: []\n};\nexport const msgReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case MsgActionType.ADDMSG:\n      {\n        const newState = state;\n        let index = -1;\n\n        if (action.payload.sender == \"Me\") {\n          index = state.list.findIndex(item => item.name === action.payload.recipient);\n        } else {\n          index = state.list.findIndex(item => item.name === action.payload.sender);\n        }\n\n        console.log(`reducer add msg, index = ${index}`);\n\n        if (index >= 0) {\n          console.log(`reducer index = ${index}`);\n          console.log(`count = ${state.list[index].count}`); // newState.list[index].count;\n\n          newState.list[index].msg = [...newState.list[index].msg, action.payload];\n          newState.list[index].count = newState.list[index].count + 1;\n          return { ...state,\n            list: newState.list\n          }; // return {\n          //   ...state,\n          //   list: state.list[index].count + 1,\n          //   list: [...state.msg, action.payload]\n          // };\n        } else {\n          console.log(`reducer create msglist`);\n          let sender = \"\";\n\n          if (action.payload.sender == \"Me\") {\n            sender = action.payload.recipient;\n          } else {\n            sender = action.payload.sender;\n          }\n\n          const newMsgList = {\n            name: sender,\n            count: 1,\n            msg: []\n          };\n          newMsgList.msg = [...newMsgList.msg, action.payload];\n          newState.list = [...newState.list, newMsgList];\n          return { ...state,\n            list: newState.list,\n            count: state.count + 1\n          };\n        }\n      }\n\n    case MsgActionType.ADDCONVERS:\n      {\n        if (state.list.find(item => item.name === action.payload)) return state;\n        const newState = state;\n        const newMsgList = {\n          name: action.payload,\n          count: 0,\n          msg: []\n        };\n        newState.list = [...newState.list, newMsgList];\n        return { ...state,\n          list: newState.list\n        };\n      }\n\n    case MsgActionType.SETACTIVECONVERS:\n      {\n        console.log('reducer set active convers');\n        return { ...state,\n          active: action.payload\n        };\n      }\n\n    default:\n      return state;\n  }\n}; // case actionTypes.ADD: {\n//   return {\n//     ...state,\n//     count: state.count + 1,\n//     list: [...state.list, action.payload]\n//   };\n// }\n// case actionTypes.DELETE: {\n//   const oldList = [...state.list];\n//   const newList = oldList;\n//   return {\n//     ...state,\n//     count: state.count - 1,\n//     list: newList\n//   };\n// }","map":{"version":3,"names":["MsgActionType","initialState","active","name","count","msg","list","msgReducer","state","action","type","ADDMSG","newState","index","payload","sender","findIndex","item","recipient","console","log","newMsgList","ADDCONVERS","find","SETACTIVECONVERS"],"sources":["/Users/cgangaro/chat-app_Nestjs-React_Redux-Socket.io/fronttest/src/State/Reducers/msgReducer.tsx"],"sourcesContent":["import { MsgActionType } from \"../Action-Types\";\nimport { msgAction } from \"../Actions\";\nimport { msg } from \"../type\";\n\ninterface msgList {\n  name: string;\n  count: number;\n  msg: msg[];\n}\n\ninterface Conversations {\n  active: msgList;\n  count: number;\n  list: msgList[];\n}\n\nexport const initialState: Conversations = {\n  active: {name: \"\", count: 0, msg: []},\n  count: 0,\n  list: []\n};\n\nexport const msgReducer = (state: Conversations = initialState, action: msgAction) => {\n  switch (action.type) {\n    case MsgActionType.ADDMSG: {\n      const newState = state;\n      let index = -1;\n      if (action.payload.sender == \"Me\")\n      {\n        index = state.list.findIndex(item => item.name === action.payload.recipient);\n      }\n      else\n      {\n        index = state.list.findIndex(item => item.name === action.payload.sender);\n      }\n      console.log(`reducer add msg, index = ${index}`);\n      if (index >= 0)\n      {\n        console.log(`reducer index = ${index}`)\n        console.log(`count = ${state.list[index].count}`)\n        // newState.list[index].count;\n        newState.list[index].msg = [...newState.list[index].msg, action.payload];\n        newState.list[index].count = newState.list[index].count + 1;\n        return {\n          ...state,\n          list: newState.list\n        };\n        // return {\n        //   ...state,\n        //   list: state.list[index].count + 1,\n        //   list: [...state.msg, action.payload]\n        // };\n      }\n      else\n      {\n        console.log(`reducer create msglist`)\n        let sender = \"\";\n        if (action.payload.sender == \"Me\")\n        {\n          sender = action.payload.recipient;\n        }\n        else\n        {\n          sender = action.payload.sender;\n        }\n        const newMsgList: msgList = {\n          name: sender,\n          count: 1,\n          msg: []\n        }\n        newMsgList.msg = [...newMsgList.msg, action.payload];\n        newState.list = [...newState.list, newMsgList];\n        return {\n          ...state,\n          list: newState.list,\n          count: state.count + 1\n        };\n      }\n    }\n    case MsgActionType.ADDCONVERS: {\n      if (state.list.find(item => item.name === action.payload))\n        return state;\n      const newState = state;\n      const newMsgList: msgList = {\n        name: action.payload,\n        count: 0,\n        msg: []\n      }\n      newState.list = [...newState.list, newMsgList];\n      return {\n        ...state,\n        list: newState.list\n      };\n    }\n    case MsgActionType.SETACTIVECONVERS: {\n      console.log('reducer set active convers')\n      return {\n        ...state,\n        active: action.payload\n      }\n    }\n    default:\n      return state;\n  }\n};\n\n// case actionTypes.ADD: {\n//   return {\n//     ...state,\n//     count: state.count + 1,\n//     list: [...state.list, action.payload]\n//   };\n// }\n// case actionTypes.DELETE: {\n//   const oldList = [...state.list];\n//   const newList = oldList;\n\n//   return {\n//     ...state,\n//     count: state.count - 1,\n//     list: newList\n//   };\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module"}